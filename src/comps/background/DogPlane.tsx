/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 DogPlane.glb -t
*/

import * as THREE from "three";
import React, { useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { Group, Mesh } from "three";
import { useFrame } from "@react-three/fiber";

type GLTFResult = GLTF & {
  nodes: {
    ["Node-Mesh"]: THREE.Mesh;
    ["Node-Mesh_1"]: THREE.Mesh;
    ["Node-Mesh_2"]: THREE.Mesh;
    ["Node-Mesh_3"]: THREE.Mesh;
    ["Node-Mesh_4"]: THREE.Mesh;
  };
  materials: {
    mat7: THREE.MeshStandardMaterial;
    mat15: THREE.MeshStandardMaterial;
    mat23: THREE.MeshStandardMaterial;
    mat21: THREE.MeshStandardMaterial;
    mat19: THREE.MeshStandardMaterial;
  };
};

export function DogPlane(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF("/models/DogPlane.glb") as GLTFResult;
  const dog = useRef<Group>(null);

  useFrame(({ clock }, delta) => {
    if (dog.current) {
      // fly in circles by rotation
      dog.current.position.x = Math.sin(clock.getElapsedTime()) * 4;
      dog.current.position.y = Math.cos(clock.getElapsedTime()) * 0.5;
      dog.current.position.z = Math.cos(clock.getElapsedTime()) * 3;

      // rotate to make front of group always face center of the circle

      dog.current.lookAt(Math.sin(clock.getElapsedTime()) * -2, 0, 0);
    }
  });

  return (
    <group>
      <group {...props} ref={dog} dispose={null}>
        <mesh
          geometry={nodes["Node-Mesh"].geometry}
          material={materials.mat7}
          rotation-y={Math.PI}
        />
        <mesh
          geometry={nodes["Node-Mesh_1"].geometry}
          material={materials.mat15}
          rotation-y={Math.PI}
        />
        <mesh
          geometry={nodes["Node-Mesh_2"].geometry}
          material={materials.mat23}
          rotation-y={Math.PI}
        />
        <mesh
          geometry={nodes["Node-Mesh_3"].geometry}
          material={materials.mat21}
          rotation-y={Math.PI}
        />
        <mesh
          geometry={nodes["Node-Mesh_4"].geometry}
          material={materials.mat19}
          rotation-y={Math.PI}
        />
      </group>
    </group>
  );
}

useGLTF.preload("/models/DogPlane.glb");
